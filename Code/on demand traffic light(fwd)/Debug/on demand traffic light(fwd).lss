
on demand traffic light(fwd).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000006ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001065  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e8  00000000  00000000  00002216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e8  00000000  00000000  00002e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096c  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  74:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
void app_init(){
	
/************************************************************************/
/*					Initializing pins                                   */
/************************************************************************/
	btn_init(BTN_PIN, BTN_PORT);	
  7c:	63 e4       	ldi	r22, 0x43	; 67
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <btn_init>
	
	led_init(LED_RED_PIN, CAR_LIGHT_PORT);
  84:	61 e4       	ldi	r22, 0x41	; 65
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 3e 01 	call	0x27c	; 0x27c <led_init>
	led_init(LED_YELLOW_PIN, CAR_LIGHT_PORT);
  8c:	61 e4       	ldi	r22, 0x41	; 65
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 3e 01 	call	0x27c	; 0x27c <led_init>
	led_init(LED_GREEN_PIN, CAR_LIGHT_PORT);
  94:	61 e4       	ldi	r22, 0x41	; 65
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 3e 01 	call	0x27c	; 0x27c <led_init>
	
	led_init(LED_RED_PIN, PEDESTRIANS_LIGHT_PORT);
  9c:	62 e4       	ldi	r22, 0x42	; 66
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 3e 01 	call	0x27c	; 0x27c <led_init>
	led_init(LED_YELLOW_PIN, PEDESTRIANS_LIGHT_PORT);
  a4:	62 e4       	ldi	r22, 0x42	; 66
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 3e 01 	call	0x27c	; 0x27c <led_init>
	led_init(LED_GREEN_PIN, PEDESTRIANS_LIGHT_PORT);
  ac:	62 e4       	ldi	r22, 0x42	; 66
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 3e 01 	call	0x27c	; 0x27c <led_init>

	TIMER_0_init();
  b4:	0e 94 bb 02 	call	0x576	; 0x576 <TIMER_0_init>
	interrupt_t0_overflow_init();
  b8:	0e 94 b5 02 	call	0x56a	; 0x56a <interrupt_t0_overflow_init>
	interrupt_0_init();
  bc:	0e 94 ab 02 	call	0x556	; 0x556 <interrupt_0_init>
	interrupt_global_init();
  c0:	0e 94 a7 02 	call	0x54e	; 0x54e <interrupt_global_init>
  c4:	08 95       	ret

000000c6 <app_start>:
}

void app_start(){
	
	//************************************* Phase 1 *************************************//
	if(phase_count == phase_1){
  c6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
  ca:	81 11       	cpse	r24, r1
  cc:	18 c0       	rjmp	.+48     	; 0xfe <app_start+0x38>
		led_on(LED_GREEN_PIN, CAR_LIGHT_PORT);
  ce:	61 e4       	ldi	r22, 0x41	; 65
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 42 01 	call	0x284	; 0x284 <led_on>
		led_on(LED_RED_PIN, PEDESTRIANS_LIGHT_PORT);
  d6:	62 e4       	ldi	r22, 0x42	; 66
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 42 01 	call	0x284	; 0x284 <led_on>
			
		TIMER_0_delay(); /* adds 5 seconds delay */
  de:	0e 94 cd 02 	call	0x59a	; 0x59a <TIMER_0_delay>
		
		phase_count = (phase_count+1)%4; /* using modulus to get this range of values [0-3][phase1-phase 4] */
  e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	83 70       	andi	r24, 0x03	; 3
  ec:	90 78       	andi	r25, 0x80	; 128
  ee:	99 23       	and	r25, r25
  f0:	24 f4       	brge	.+8      	; 0xfa <app_start+0x34>
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	8c 6f       	ori	r24, 0xFC	; 252
  f6:	9f 6f       	ori	r25, 0xFF	; 255
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <phase_count>
	}
		
	//************************************* Phase 2 *************************************//
	if(phase_count == phase_2){
  fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	c1 f4       	brne	.+48     	; 0x136 <app_start+0x70>
		/*	In this phase, timer_0 overflow interrupt blinks cars yellow light in normal mode
			and both cars and pedestrian yellow light in pedestrian mode. */
		TIMER_0_delay();
 106:	0e 94 cd 02 	call	0x59a	; 0x59a <TIMER_0_delay>
		
		/* Turning both yellow LEDs off to ensure toggling ends with an off states */
		led_off(LED_YELLOW_PIN, CAR_LIGHT_PORT);
 10a:	61 e4       	ldi	r22, 0x41	; 65
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
		led_off(LED_YELLOW_PIN, PEDESTRIANS_LIGHT_PORT);
 112:	62 e4       	ldi	r22, 0x42	; 66
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
		
		phase_count = (phase_count+1)%4;
 11a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	83 70       	andi	r24, 0x03	; 3
 124:	90 78       	andi	r25, 0x80	; 128
 126:	99 23       	and	r25, r25
 128:	24 f4       	brge	.+8      	; 0x132 <app_start+0x6c>
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	8c 6f       	ori	r24, 0xFC	; 252
 12e:	9f 6f       	ori	r25, 0xFF	; 255
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <phase_count>
	}

	//************************************* Phase 3 *************************************//
	if(phase_count == phase_3){
 136:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	21 f5       	brne	.+72     	; 0x186 <app_start+0xc0>
		if(pedestrian_request){
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	88 23       	and	r24, r24
 144:	41 f0       	breq	.+16     	; 0x156 <app_start+0x90>
			led_on(LED_GREEN_PIN, PEDESTRIANS_LIGHT_PORT);
 146:	62 e4       	ldi	r22, 0x42	; 66
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 42 01 	call	0x284	; 0x284 <led_on>
			led_off(LED_RED_PIN, PEDESTRIANS_LIGHT_PORT);
 14e:	62 e4       	ldi	r22, 0x42	; 66
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
		}
		led_off(LED_GREEN_PIN, CAR_LIGHT_PORT);
 156:	61 e4       	ldi	r22, 0x41	; 65
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
		led_on(LED_RED_PIN, CAR_LIGHT_PORT);
 15e:	61 e4       	ldi	r22, 0x41	; 65
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 42 01 	call	0x284	; 0x284 <led_on>
		
		TIMER_0_delay();
 166:	0e 94 cd 02 	call	0x59a	; 0x59a <TIMER_0_delay>
		
		phase_count = (phase_count+1)%4;
 16a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	83 70       	andi	r24, 0x03	; 3
 174:	90 78       	andi	r25, 0x80	; 128
 176:	99 23       	and	r25, r25
 178:	24 f4       	brge	.+8      	; 0x182 <app_start+0xbc>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	8c 6f       	ori	r24, 0xFC	; 252
 17e:	9f 6f       	ori	r25, 0xFF	; 255
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <phase_count>
	
	//************************************* Phase 4 *************************************//
	
	/*	In this phase, timer_0 overflow interrupt blinks cars yellow light in normal mode
		and both cars and pedestrian yellow light in pedestrian mode. */
	TIMER_0_delay();
 186:	0e 94 cd 02 	call	0x59a	; 0x59a <TIMER_0_delay>
	
	led_off(LED_GREEN_PIN, PEDESTRIANS_LIGHT_PORT);
 18a:	62 e4       	ldi	r22, 0x42	; 66
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
	led_off(LED_YELLOW_PIN, CAR_LIGHT_PORT);
 192:	61 e4       	ldi	r22, 0x41	; 65
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
	led_off(LED_YELLOW_PIN, PEDESTRIANS_LIGHT_PORT);
 19a:	62 e4       	ldi	r22, 0x42	; 66
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
	
	
	if(phase_count == phase_4){
 1a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	91 f4       	brne	.+36     	; 0x1ce <app_start+0x108>
		phase_count = (phase_count+1)%4;
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	83 70       	andi	r24, 0x03	; 3
 1b0:	90 78       	andi	r25, 0x80	; 128
 1b2:	99 23       	and	r25, r25
 1b4:	24 f4       	brge	.+8      	; 0x1be <app_start+0xf8>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	8c 6f       	ori	r24, 0xFC	; 252
 1ba:	9f 6f       	ori	r25, 0xFF	; 255
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <phase_count>
		
		led_off(LED_RED_PIN, CAR_LIGHT_PORT);
 1c2:	61 e4       	ldi	r22, 0x41	; 65
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>

		pedestrian_request=0;
 1ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ce:	08 95       	ret

000001d0 <btn_init>:
	 DIO_init(pinNumber, portName, IN);
 }


 void btn_read(uint8_t pinNumber, uint8_t portName, uint8_t* result){
	 DIO_read(pinNumber, portName, result);
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_init>
 1d6:	08 95       	ret

000001d8 <__vector_1>:
 }

 ISR(EXT_INT_0){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	 /************************************************************************/
	 /*    Using rising edge with interrupt 0 to avoid long press effect     */
	 /***********************************************************************/
	 
	 /* predestrian_request flag condition is used to avoid double click here */
	 if(!pedestrian_request){
 1fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fe:	81 11       	cpse	r24, r1
 200:	2c c0       	rjmp	.+88     	; 0x25a <__vector_1+0x82>
		 if(phase_count == phase_1){
 202:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
 206:	81 11       	cpse	r24, r1
 208:	04 c0       	rjmp	.+8      	; 0x212 <__vector_1+0x3a>
			 overflow_count=20;
 20a:	84 e1       	ldi	r24, 0x14	; 20
 20c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_count>
 210:	21 c0       	rjmp	.+66     	; 0x254 <__vector_1+0x7c>
		 }
		 else if(phase_count == phase_2){
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	51 f4       	brne	.+20     	; 0x22a <__vector_1+0x52>
			 led_off(LED_YELLOW_PIN, CAR_LIGHT_PORT);
 216:	61 e4       	ldi	r22, 0x41	; 65
 218:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
			 led_off(LED_YELLOW_PIN, PEDESTRIANS_LIGHT_PORT);
 21c:	62 e4       	ldi	r22, 0x42	; 66
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
			 
			 TIMER_reset();
 224:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <TIMER_reset>
 228:	15 c0       	rjmp	.+42     	; 0x254 <__vector_1+0x7c>
		 }
		 else if(phase_count == phase_3){
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	59 f4       	brne	.+22     	; 0x244 <__vector_1+0x6c>
			 TIMER_reset();
 22e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <TIMER_reset>
			 
			 led_off(LED_RED_PIN, PEDESTRIANS_LIGHT_PORT);
 232:	62 e4       	ldi	r22, 0x42	; 66
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 46 01 	call	0x28c	; 0x28c <led_off>
			 led_on(LED_GREEN_PIN, PEDESTRIANS_LIGHT_PORT);
 23a:	62 e4       	ldi	r22, 0x42	; 66
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 42 01 	call	0x284	; 0x284 <led_on>
 242:	08 c0       	rjmp	.+16     	; 0x254 <__vector_1+0x7c>
		 }
		 else if(phase_count == phase_4){
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	31 f4       	brne	.+12     	; 0x254 <__vector_1+0x7c>
			 overflow_count=20;
 248:	84 e1       	ldi	r24, 0x14	; 20
 24a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_count>
			 phase_count = phase_2;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <phase_count>
		 }
		 pedestrian_request=1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	 }
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <led_init>:
 */ 
 
#include "led.h"
  
  void led_init(uint8_t pinNumber, uint8_t portNumber){
	  DIO_init(pinNumber, portNumber, OUT);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_init>
 282:	08 95       	ret

00000284 <led_on>:
  }
  void led_on(uint8_t pintNumber, uint8_t portNumber){
	  DIO_write(pintNumber, portNumber, HIGH);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	0e 94 dd 01 	call	0x3ba	; 0x3ba <DIO_write>
 28a:	08 95       	ret

0000028c <led_off>:
  }
  void led_off(uint8_t pinNumber, uint8_t portNumber){
	  DIO_write(pinNumber, portNumber, LOW);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <DIO_write>
 292:	08 95       	ret

00000294 <led_toggle>:
  }
  void led_toggle(uint8_t pinNumber, uint8_t portNumber){
	  DIO_toggle(pinNumber, portNumber);
 294:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_toggle>
 298:	08 95       	ret

0000029a <main>:
*/
#include "Application/application.h"

int main(void)
{
	app_init();
 29a:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	while (1)
	{
		app_start();
 29e:	0e 94 63 00 	call	0xc6	; 0xc6 <app_start>
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <main+0x4>

000002a4 <DIO_init>:
		break;
		case PORT_C:
		*value = get_pin(pinNumber, PINC);
		break;
		case PORT_D:
		*value = get_pin(pinNumber, PIND);
 2a4:	62 34       	cpi	r22, 0x42	; 66
 2a6:	59 f1       	breq	.+86     	; 0x2fe <DIO_init+0x5a>
 2a8:	18 f4       	brcc	.+6      	; 0x2b0 <DIO_init+0xc>
 2aa:	61 34       	cpi	r22, 0x41	; 65
 2ac:	41 f0       	breq	.+16     	; 0x2be <DIO_init+0x1a>
 2ae:	08 95       	ret
 2b0:	63 34       	cpi	r22, 0x43	; 67
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_init+0x12>
 2b4:	44 c0       	rjmp	.+136    	; 0x33e <DIO_init+0x9a>
 2b6:	64 34       	cpi	r22, 0x44	; 68
 2b8:	09 f4       	brne	.+2      	; 0x2bc <DIO_init+0x18>
 2ba:	60 c0       	rjmp	.+192    	; 0x37c <DIO_init+0xd8>
 2bc:	08 95       	ret
 2be:	41 11       	cpse	r20, r1
 2c0:	0e c0       	rjmp	.+28     	; 0x2de <DIO_init+0x3a>
 2c2:	4a b3       	in	r20, 0x1a	; 26
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_init+0x2c>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_init+0x28>
 2d4:	cb 01       	movw	r24, r22
 2d6:	80 95       	com	r24
 2d8:	84 23       	and	r24, r20
 2da:	8a bb       	out	0x1a, r24	; 26
 2dc:	08 95       	ret
 2de:	41 30       	cpi	r20, 0x01	; 1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <DIO_init+0x40>
 2e2:	6a c0       	rjmp	.+212    	; 0x3b8 <DIO_init+0x114>
 2e4:	4a b3       	in	r20, 0x1a	; 26
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_init+0x4e>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_init+0x4a>
 2f6:	cb 01       	movw	r24, r22
 2f8:	84 2b       	or	r24, r20
 2fa:	8a bb       	out	0x1a, r24	; 26
 2fc:	08 95       	ret
 2fe:	41 11       	cpse	r20, r1
 300:	0e c0       	rjmp	.+28     	; 0x31e <DIO_init+0x7a>
 302:	47 b3       	in	r20, 0x17	; 23
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	b9 01       	movw	r22, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_init+0x6c>
 30c:	66 0f       	add	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	8a 95       	dec	r24
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_init+0x68>
 314:	cb 01       	movw	r24, r22
 316:	80 95       	com	r24
 318:	84 23       	and	r24, r20
 31a:	87 bb       	out	0x17, r24	; 23
 31c:	08 95       	ret
 31e:	41 30       	cpi	r20, 0x01	; 1
 320:	09 f0       	breq	.+2      	; 0x324 <DIO_init+0x80>
 322:	4a c0       	rjmp	.+148    	; 0x3b8 <DIO_init+0x114>
 324:	47 b3       	in	r20, 0x17	; 23
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	b9 01       	movw	r22, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_init+0x8e>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	8a 95       	dec	r24
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_init+0x8a>
 336:	cb 01       	movw	r24, r22
 338:	84 2b       	or	r24, r20
 33a:	87 bb       	out	0x17, r24	; 23
 33c:	08 95       	ret
 33e:	41 11       	cpse	r20, r1
 340:	0e c0       	rjmp	.+28     	; 0x35e <DIO_init+0xba>
 342:	44 b3       	in	r20, 0x14	; 20
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	b9 01       	movw	r22, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_init+0xac>
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	8a 95       	dec	r24
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_init+0xa8>
 354:	cb 01       	movw	r24, r22
 356:	80 95       	com	r24
 358:	84 23       	and	r24, r20
 35a:	84 bb       	out	0x14, r24	; 20
 35c:	08 95       	ret
 35e:	41 30       	cpi	r20, 0x01	; 1
 360:	59 f5       	brne	.+86     	; 0x3b8 <DIO_init+0x114>
 362:	44 b3       	in	r20, 0x14	; 20
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	b9 01       	movw	r22, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_init+0xcc>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	8a 95       	dec	r24
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_init+0xc8>
 374:	cb 01       	movw	r24, r22
 376:	84 2b       	or	r24, r20
 378:	84 bb       	out	0x14, r24	; 20
 37a:	08 95       	ret
 37c:	41 11       	cpse	r20, r1
 37e:	0e c0       	rjmp	.+28     	; 0x39c <DIO_init+0xf8>
 380:	41 b3       	in	r20, 0x11	; 17
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	b9 01       	movw	r22, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_init+0xea>
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	8a 95       	dec	r24
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_init+0xe6>
 392:	cb 01       	movw	r24, r22
 394:	80 95       	com	r24
 396:	84 23       	and	r24, r20
 398:	81 bb       	out	0x11, r24	; 17
 39a:	08 95       	ret
 39c:	41 30       	cpi	r20, 0x01	; 1
 39e:	61 f4       	brne	.+24     	; 0x3b8 <DIO_init+0x114>
 3a0:	41 b3       	in	r20, 0x11	; 17
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_init+0x10a>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	8a 95       	dec	r24
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_init+0x106>
 3b2:	cb 01       	movw	r24, r22
 3b4:	84 2b       	or	r24, r20
 3b6:	81 bb       	out	0x11, r24	; 17
 3b8:	08 95       	ret

000003ba <DIO_write>:
		break;
		
	}
}
void DIO_write(uint8_t pinNumber, uint8_t portName, uint8_t value){
	switch(portName)
 3ba:	62 34       	cpi	r22, 0x42	; 66
 3bc:	59 f1       	breq	.+86     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <DIO_write+0xc>
 3c0:	61 34       	cpi	r22, 0x41	; 65
 3c2:	41 f0       	breq	.+16     	; 0x3d4 <DIO_write+0x1a>
 3c4:	08 95       	ret
 3c6:	63 34       	cpi	r22, 0x43	; 67
 3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_write+0x12>
 3ca:	44 c0       	rjmp	.+136    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3cc:	64 34       	cpi	r22, 0x44	; 68
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <DIO_write+0x18>
 3d0:	60 c0       	rjmp	.+192    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 3d2:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 3d4:	41 11       	cpse	r20, r1
 3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <DIO_write+0x3a>
		{
			clear_pin(pinNumber, PORTA);
 3d8:	4b b3       	in	r20, 0x1b	; 27
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	b9 01       	movw	r22, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_write+0x2c>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_write+0x28>
 3ea:	cb 01       	movw	r24, r22
 3ec:	80 95       	com	r24
 3ee:	84 23       	and	r24, r20
 3f0:	8b bb       	out	0x1b, r24	; 27
 3f2:	08 95       	ret
		}
		else if(value == HIGH)
 3f4:	41 30       	cpi	r20, 0x01	; 1
 3f6:	09 f0       	breq	.+2      	; 0x3fa <DIO_write+0x40>
 3f8:	6a c0       	rjmp	.+212    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		{
			set_pin(pinNumber, PORTA);
 3fa:	4b b3       	in	r20, 0x1b	; 27
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	8a 95       	dec	r24
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	cb 01       	movw	r24, r22
 40e:	84 2b       	or	r24, r20
 410:	8b bb       	out	0x1b, r24	; 27
 412:	08 95       	ret
		}
		break;
		case PORT_B:
		if(value == LOW)
 414:	41 11       	cpse	r20, r1
 416:	0e c0       	rjmp	.+28     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		{
			clear_pin(pinNumber, PORTB);
 418:	48 b3       	in	r20, 0x18	; 24
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	cb 01       	movw	r24, r22
 42c:	80 95       	com	r24
 42e:	84 23       	and	r24, r20
 430:	88 bb       	out	0x18, r24	; 24
 432:	08 95       	ret
		}
		else if(value == HIGH)
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	09 f0       	breq	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	4a c0       	rjmp	.+148    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		{
			set_pin(pinNumber, PORTB);
 43a:	48 b3       	in	r20, 0x18	; 24
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	b9 01       	movw	r22, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	cb 01       	movw	r24, r22
 44e:	84 2b       	or	r24, r20
 450:	88 bb       	out	0x18, r24	; 24
 452:	08 95       	ret
		}
		break;
		case PORT_C:
		if(value == LOW)
 454:	41 11       	cpse	r20, r1
 456:	0e c0       	rjmp	.+28     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		{
			clear_pin(pinNumber, PORTC);
 458:	45 b3       	in	r20, 0x15	; 21
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	b9 01       	movw	r22, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	8a 95       	dec	r24
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	cb 01       	movw	r24, r22
 46c:	80 95       	com	r24
 46e:	84 23       	and	r24, r20
 470:	85 bb       	out	0x15, r24	; 21
 472:	08 95       	ret
		}
		else if(value == HIGH)
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	59 f5       	brne	.+86     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		{
			set_pin(pinNumber, PORTC);
 478:	45 b3       	in	r20, 0x15	; 21
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	b9 01       	movw	r22, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	8a 95       	dec	r24
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	cb 01       	movw	r24, r22
 48c:	84 2b       	or	r24, r20
 48e:	85 bb       	out	0x15, r24	; 21
 490:	08 95       	ret
		}
		break;
		case PORT_D:
		if(value == LOW)
 492:	41 11       	cpse	r20, r1
 494:	0e c0       	rjmp	.+28     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		{
			clear_pin(pinNumber, PORTD);
 496:	42 b3       	in	r20, 0x12	; 18
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	b9 01       	movw	r22, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	8a 95       	dec	r24
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a8:	cb 01       	movw	r24, r22
 4aa:	80 95       	com	r24
 4ac:	84 23       	and	r24, r20
 4ae:	82 bb       	out	0x12, r24	; 18
 4b0:	08 95       	ret
		}
		else if(value == HIGH)
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	61 f4       	brne	.+24     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		{
			set_pin(pinNumber, PORTD);
 4b6:	42 b3       	in	r20, 0x12	; 18
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c8:	cb 01       	movw	r24, r22
 4ca:	84 2b       	or	r24, r20
 4cc:	82 bb       	out	0x12, r24	; 18
 4ce:	08 95       	ret

000004d0 <DIO_toggle>:
		break;
	}
}

void DIO_toggle(uint8_t pinNumber, uint8_t portName){
	switch(portName){
 4d0:	62 34       	cpi	r22, 0x42	; 66
 4d2:	b1 f0       	breq	.+44     	; 0x500 <DIO_toggle+0x30>
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <DIO_toggle+0xc>
 4d6:	61 34       	cpi	r22, 0x41	; 65
 4d8:	31 f0       	breq	.+12     	; 0x4e6 <DIO_toggle+0x16>
 4da:	08 95       	ret
 4dc:	63 34       	cpi	r22, 0x43	; 67
 4de:	e9 f0       	breq	.+58     	; 0x51a <DIO_toggle+0x4a>
 4e0:	64 34       	cpi	r22, 0x44	; 68
 4e2:	41 f1       	breq	.+80     	; 0x534 <DIO_toggle+0x64>
 4e4:	08 95       	ret
		case PORT_A:
		toggle_pin(pinNumber, PORTA);
 4e6:	4b b3       	in	r20, 0x1b	; 27
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	b9 01       	movw	r22, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_toggle+0x24>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	8a 95       	dec	r24
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_toggle+0x20>
 4f8:	cb 01       	movw	r24, r22
 4fa:	84 27       	eor	r24, r20
 4fc:	8b bb       	out	0x1b, r24	; 27
		break;
 4fe:	08 95       	ret
		case PORT_B:
		toggle_pin(pinNumber, PORTB);
 500:	48 b3       	in	r20, 0x18	; 24
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	b9 01       	movw	r22, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_toggle+0x3e>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_toggle+0x3a>
 512:	cb 01       	movw	r24, r22
 514:	84 27       	eor	r24, r20
 516:	88 bb       	out	0x18, r24	; 24
		break;
 518:	08 95       	ret
		case PORT_C:
		toggle_pin(pinNumber, PORTC);
 51a:	45 b3       	in	r20, 0x15	; 21
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_toggle+0x58>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_toggle+0x54>
 52c:	cb 01       	movw	r24, r22
 52e:	84 27       	eor	r24, r20
 530:	85 bb       	out	0x15, r24	; 21
		break;
 532:	08 95       	ret
		case PORT_D:
		toggle_pin(pinNumber, PORTC);
 534:	45 b3       	in	r20, 0x15	; 21
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	b9 01       	movw	r22, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_toggle+0x72>
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	8a 95       	dec	r24
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_toggle+0x6e>
 546:	cb 01       	movw	r24, r22
 548:	84 27       	eor	r24, r20
 54a:	85 bb       	out	0x15, r24	; 21
 54c:	08 95       	ret

0000054e <interrupt_global_init>:

void interrupt_global_init(){
	/************************************************************************/
	/*               enabling global interrupt in status register          */
	/**********************************************************************/
	set_pin(7, SREG);
 54e:	8f b7       	in	r24, 0x3f	; 63
 550:	80 68       	ori	r24, 0x80	; 128
 552:	8f bf       	out	0x3f, r24	; 63
 554:	08 95       	ret

00000556 <interrupt_0_init>:

void interrupt_0_init(){
	/********************************************************************************/
	/* setting int_0 mode on rising edge in micro-controller unit control register */
	/******************************************************************************/
	set_pin(0, MCUCR);
 556:	85 b7       	in	r24, 0x35	; 53
 558:	81 60       	ori	r24, 0x01	; 1
 55a:	85 bf       	out	0x35, r24	; 53
	set_pin(1, MCUCR);
 55c:	85 b7       	in	r24, 0x35	; 53
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	85 bf       	out	0x35, r24	; 53
	
	/*************************************************************************/
	/*    enabling int_0 interrupt in general interrupt control register     */
	/***********************************************************************/
	set_pin(6, GICR);
 562:	88 b7       	in	r24, 0x38	; 56
 564:	80 64       	ori	r24, 0x40	; 64
 566:	88 bf       	out	0x38, r24	; 56
 568:	08 95       	ret

0000056a <interrupt_t0_overflow_init>:

void interrupt_t0_overflow_init(){
	/********************************************************************/
	/*     enabling t0 overflow interrupt in timer interrupt mask      */
	/******************************************************************/
	set_pin(0, TIMSK);
 56a:	89 b7       	in	r24, 0x39	; 57
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	89 bf       	out	0x39, r24	; 57
 570:	08 95       	ret

00000572 <TIMER_0_set_init_value>:
	
	TIMER_0_set_init_value(init_value);
}

void TIMER_0_set_init_value(uint8_t val){
	TCNT0 = val;
 572:	82 bf       	out	0x32, r24	; 50
 574:	08 95       	ret

00000576 <TIMER_0_init>:

uint8_t overflow_count;


void TIMER_0_init(){
	TCCR0 |= 0x00; //Normal mode
 576:	83 b7       	in	r24, 0x33	; 51
 578:	83 bf       	out	0x33, r24	; 51
	
	TIMER_0_set_init_value(init_value);
 57a:	8b e0       	ldi	r24, 0x0B	; 11
 57c:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER_0_set_init_value>
 580:	08 95       	ret

00000582 <TIMER_0_start>:
void TIMER_0_set_init_value(uint8_t val){
	TCNT0 = val;
}

void TIMER_0_start(){
	TCCR0 |= ((1<<0) | (1<<2)); 	// Selecting 1024 prescalling
 582:	83 b7       	in	r24, 0x33	; 51
 584:	85 60       	ori	r24, 0x05	; 5
 586:	83 bf       	out	0x33, r24	; 51
	
	while(overflow_count < 20); // busy wait until 20 overflow
 588:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow_count>
 58c:	84 31       	cpi	r24, 0x14	; 20
 58e:	e0 f3       	brcs	.-8      	; 0x588 <TIMER_0_start+0x6>
}
 590:	08 95       	ret

00000592 <TIMER_0_stop>:


void TIMER_0_stop(){
	TCCR0 = 0x00; //Stop timer
 592:	13 be       	out	0x33, r1	; 51
	
	overflow_count = 0;
 594:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflow_count>
 598:	08 95       	ret

0000059a <TIMER_0_delay>:
}

void TIMER_0_delay(){
	TIMER_0_start();
 59a:	0e 94 c1 02 	call	0x582	; 0x582 <TIMER_0_start>
	TIMER_0_stop();
 59e:	0e 94 c9 02 	call	0x592	; 0x592 <TIMER_0_stop>
 5a2:	08 95       	ret

000005a4 <TIMER_reset>:
}

void TIMER_reset(){
	TIMER_0_set_init_value(init_value);
 5a4:	8b e0       	ldi	r24, 0x0B	; 11
 5a6:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER_0_set_init_value>
	overflow_count = 0;
 5aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflow_count>
 5ae:	08 95       	ret

000005b0 <__vector_11>:
}

ISR(TIMER_0_OVERFLOW){
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	TIMER_0_set_init_value(init_value); /* Resetting initial value for the next timer cycle */
 5d2:	8b e0       	ldi	r24, 0x0B	; 11
 5d4:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER_0_set_init_value>

	overflow_count++;
 5d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow_count>
 5dc:	8f 5f       	subi	r24, 0xFF	; 255
 5de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_count>
	
	if(phase_count== phase_2 || phase_count == phase_4){
 5e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <phase_count>
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	11 f0       	breq	.+4      	; 0x5ee <__vector_11+0x3e>
 5ea:	83 30       	cpi	r24, 0x03	; 3
 5ec:	c9 f4       	brne	.+50     	; 0x620 <__vector_11+0x70>
		if(!pedestrian_request){
 5ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5f2:	81 11       	cpse	r24, r1
 5f4:	07 c0       	rjmp	.+14     	; 0x604 <__vector_11+0x54>
			led_toggle(CAR_LIGHT_PORT, LED_YELLOW_PIN);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	81 e4       	ldi	r24, 0x41	; 65
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 4a 01 	call	0x294	; 0x294 <led_toggle>
 602:	0e c0       	rjmp	.+28     	; 0x620 <__vector_11+0x70>
		}
		else if(pedestrian_request){
 604:	88 23       	and	r24, r24
 606:	61 f0       	breq	.+24     	; 0x620 <__vector_11+0x70>
			led_toggle(CAR_LIGHT_PORT, LED_YELLOW_PIN);
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	70 e0       	ldi	r23, 0x00	; 0
 60c:	81 e4       	ldi	r24, 0x41	; 65
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 4a 01 	call	0x294	; 0x294 <led_toggle>
			led_toggle(PEDESTRIANS_LIGHT_PORT, LED_YELLOW_PIN);
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	82 e4       	ldi	r24, 0x42	; 66
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 4a 01 	call	0x294	; 0x294 <led_toggle>
		}
	}
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
